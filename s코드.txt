# YOLOv8 설치 (처음 한 번만 실행)			
!pip install ultralytics			
# 모델 로딩			
from ultralytics import YOLO			
# 포즈 추정용 모델 불러오기			
model = YOLO('yolov8n-pose.pt') 	


# left 이미지 keypoint 추출
import os		
import glob		
import numpy as np		
import pandas as pd		
from tqdm import tqdm		
		
# 이미지 폴더 경로		
image_folder = '/content/drive/MyDrive/AI1_team25/data/left'		
output_csv = '/content/drive/MyDrive/AI1_team25/pose_data_left.csv'		
		
# 모델은 이미 로딩된 상태
# model = YOLO('yolov8n-pose.pt') 
		
# keypoint index (COCO format)		
# 어깨: 5,6 / 엉덩이: 11,12 → spine은 중앙값		
def extract_keypoints(keypoints):		
try:		
shoulder = (keypoints[5] + keypoints[6]) / 2		
hip = (keypoints[11] + keypoints[12]) / 2		
spine = (shoulder + hip) / 2		
return np.concatenate([shoulder, spine, hip])		
except:		
return None		
		
# 이미지 리스트 불러오기		
image_paths = sorted(glob.glob(os.path.join(image_folder, '*.jpg')))		
		
# 결과 저장 리스트		
all_data = []		
		
# 추론 및 추출		
for img_path in tqdm(image_paths, desc='Keypoint 추출 중'):		
results = model.predict(source=img_path, verbose=False)		
		
if len(results[0].keypoints.xy) == 0:		
continue  # 인식 실패한 경우 skip		
		
keypoints = results[0].keypoints.xy[0].cpu().numpy()		
vec = extract_keypoints(keypoints)		
		
if vec is not None:		
filename = os.path.basename(img_path)		
row = [filename] + vec.tolist() + ['left']  # label은 일단 'left'로 표시		
all_data.append(row)		
		
# DataFrame으로 저장		
columns = ['filename',		
shoulder_x', 'shoulder_y',		
spine_x', 'spine_y',		
hip_x', 'hip_y',		
label']		
		
df = pd.DataFrame(all_data, columns=columns)		
df.to_csv(output_csv, index=False)		
print("저장 완료")		


# 경로만 변경해서 right 데이터 처리		
image_folder = '/content/drive/MyDrive/AI1_team25/data/right'		
output_csv = '/content/drive/MyDrive/AI1_team25/pose_data_right.csv'		
		
# 이미지 리스트 불러오기		
image_paths = sorted(glob.glob(os.path.join(image_folder, '*.jpg')))		
		
# 결과 저장 리스트 초기화		
all_data = []		
		
# 추론 및 추출 반복		
for img_path in tqdm(image_paths, desc='Keypoint 추출 중 (right)'):		
results = model.predict(source=img_path, verbose=False)		
		
if len(results[0].keypoints.xy) == 0:		
continue  # 인식 실패 시 skip		
		
keypoints = results[0].keypoints.xy[0].cpu().numpy()		
vec = extract_keypoints(keypoints)		
		
if vec is not None:		
filename = os.path.basename(img_path)		
row = [filename] + vec.tolist() + ['right']  # label을 'right'로 표시		
all_data.append(row)		
		
# DataFrame으로 저장		
df = pd.DataFrame(all_data, columns=columns)		
df.to_csv(output_csv, index=False)		
print("저장 완료")		




#-------------------------------------------------------------------------



# 좌표 시각화 이미지 생성(어깨 빨간점, 척추 파란점, 엉덩 초록점)

import os		
import cv2		
import pandas as pd		
from tqdm import tqdm		
		
# 경로 설정	
csv_path = '/content/drive/MyDrive/AI1_team25/pose_data_left.csv'		
image_folder = '/content/drive/MyDrive/AI1_team25/data/left'		
output_folder = '/content/drive/MyDrive/AI1_team25/annotated_left'		
		
# 출력 폴더 생성
os.makedirs(output_folder, exist_ok=True)		
		
# CSV 불러오기	
df = pd.read_csv(csv_path)		
		
# 시각화 함수 정의
def draw_keypoints(image, shoulder, spine, hip):		
cv2.circle(image, (int(shoulder[0]), int(shoulder[1])), 6, (0, 0, 255), -1)  # 어깨빨강	
cv2.circle(image, (int(spine[0]), int(spine[1])), 6, (255, 0, 0), -1)        # 척추파랑
cv2.circle(image, (int(hip[0]), int(hip[1])), 6, (0, 255, 0), -1)            # 엉덩이초록	
return image		
		
# === 시각화 시작 ===		
for _, row in tqdm(df.iterrows(), total=len(df), desc="이미지 시각화 중"):		
filename = row['filename']		
shoulder = (row['shoulder_x'], row['shoulder_y'])		
spine = (row['spine_x'], row['spine_y'])		
hip = (row['hip_x'], row['hip_y'])		
		
image_path = os.path.join(image_folder, filename)		
output_path = os.path.join(output_folder, filename)		
		
if not os.path.exists(image_path):		
print(f"⚠ 이미지 없음: {filename}")		
continue		
		
img = cv2.imread(image_path)		
if img is None:		
print(f"⚠ 이미지 로딩 실패: {filename}")		
continue		
		
annotated = draw_keypoints(img, shoulder, spine, hip)		
cv2.imwrite(output_path, annotated)		
		
print("왼쪽 시각화 이미지 저장 완료")

# 경로만 바꿔서 오른쪽		
csv_path = '/content/drive/MyDrive/AI1_team25/pose_data_right.csv'					
image_folder = '/content/drive/MyDrive/AI1_team25/data/right'					
output_folder = '/content/drive/MyDrive/AI1_team25/annotated_right'					
					
#  출력 폴더 생성		
os.makedirs(output_folder, exist_ok=True)					
					
#CSV 불러오기			
df = pd.read_csv(csv_path)					
					
# 시각화 함수 정의		
def draw_keypoints(image, shoulder, spine, hip):					
cv2.circle(image, (int(shoulder[0]), int(shoulder[1])), 6, (0, 0, 255), -1)					
cv2.circle(image, (int(spine[0]), int(spine[1])), 6, (255, 0, 0), -1)					
cv2.circle(image, (int(hip[0]), int(hip[1])), 6, (0, 255, 0), -1)					
return image					
					
# 시각화 시작			
for _, row in tqdm(df.iterrows(), total=len(df), desc="오른쪽 이미지 시각화 중"):					
filename = row['filename']					
shoulder = (row['shoulder_x'], row['shoulder_y'])					
spine = (row['spine_x'], row['spine_y'])					
hip = (row['hip_x'], row['hip_y'])					
					
image_path = os.path.join(image_folder, filename)					
output_path = os.path.join(output_folder, filename)					
					
if not os.path.exists(image_path):					
print(f"⚠ 이미지 없음: {filename}")					
continue					
					
img = cv2.imread(image_path)					
if img is None:					
print(f"⚠ 이미지 로딩 실패: {filename}")					
continue					
					
annotated = draw_keypoints(img, shoulder, spine, hip)					
cv2.imwrite(output_path, annotated)					
					
print("오른쪽 시각화 이미지 저장 완료")



#-------------------------------------------------------------------------



# 나쁜자세(sj, 신영지우) 키포인트설정_idle 사용하여 직접 키포인트를 클릭하도록(OpenCV)
import cv2			
import os			
import pandas as pd			
			
# 경로설정		
image_folder = 'C:/Users/lsy/Desktop/images_to_fix'  # 수정할 이미지가 있는 폴더			
output_csv = 'C:/Users/lsy/Desktop/corrected_keypoints.csv'  # 결과 저장할 파일			
			
# 클릭된 좌표 리스트			
clicked_points = []			
current_index = 0			
			
# 기존 결과 불러오기 또는 초기화			
if os.path.exists(output_csv):			
df = pd.read_csv(output_csv)			
processed_files = set(df['filename'].tolist())			
else:			
df = pd.DataFrame(columns=[			
filename',			
shoulder_x', 'shoulder_y',			
spine_x', 'spine_y',			
hip_x', 'hip_y'			
])			
processed_files = set()			
			
# 이미지 파일 목록 정리			
images = [f for f in os.listdir(image_folder) if f.lower().endswith(('.jpg', '.png'))]			
images = [f for f in images if f not in processed_files]			
			
def click_event(event, x, y, flags, param):			
global clicked_points, current_index, df			
			
if event == cv2.EVENT_LBUTTONDOWN:			
clicked_points.append((x, y))			
print(f"\u2709\ufe0f 클릭 좌표: ({x}, {y})")			
cv2.circle(param, (x, y), 5, (0, 255, 255), -1)			
cv2.imshow('image', param)			
			
if len(clicked_points) == 3:			
filename = images[current_index]			
row = {			
filename': filename,			
shoulder_x': clicked_points[0][0], 'shoulder_y': clicked_points[0][1],			
spine_x': clicked_points[1][0], 'spine_y': clicked_points[1][1],			
hip_x': clicked_points[2][0], 'hip_y': clicked_points[2][1]			
}			
df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)			
df.to_csv(output_csv, index=False)			
print(f"\u2705 저장 완료: {filename}")			
			
clicked_points = []			
current_index += 1			
if current_index < len(images):			
show_image()			
else:			
print("\U0001f389 모든 이미지 처리 완료!")			
cv2.destroyAllWindows()			
			
def show_image():			
img_path = os.path.join(image_folder, images[current_index])			
img = cv2.imread(img_path)			
if img is None:			
print(f"\u274c 이미지 로딩 실패: {img_path}")			
return			
cv2.imshow('image', img)			
cv2.setMouseCallback('image', click_event, img)			
			
# 실행 시작			
if len(images) == 0:			
print("처리할 이미지가 없습니다.")			
else:			
cv2.namedWindow('image', cv2.WINDOW_NORMAL)			
show_image()			
cv2.waitKey(0)			
cv2.destroyAllWindows()			



#-------------------------------------------------------------------------



# 각도 계산 및 라벨링(86 ~ 94 범위)				
import pandas as pd				
import math				
				
# === 파일 경로 설정 ===				
csv_left = '/content/drive/MyDrive/AI1_team25/pose_data_left.csv'				
csv_right = '/content/drive/MyDrive/AI1_team25/pose_data_right.csv'				
output_left = '/content/drive/MyDrive/AI1_team25/labeled_pose_data_left.csv'				
output_right = '/content/drive/MyDrive/AI1_team25/labeled_pose_data_right.csv'				
				
# === 어깨~엉덩이 기울기 각도 계산 함수				
def compute_angle(p1, p2):				
dx = p2[0] - p1[0]				
dy = p2[1] - p1[1]				
angle_rad = math.atan2(dy, dx)				
return math.degrees(angle_rad)				
				
# === 라벨링 함수 정의				
def label_posture(df):				
angles = []				
labels = []				
				
for _, row in df.iterrows():				
shoulder = (row['shoulder_x'], row['shoulder_y'])				
hip = (row['hip_x'], row['hip_y'])				
angle = compute_angle(shoulder, hip)				
angles.append(angle)				
				
if 'sj' in row['filename']:				
label = 'bad_posture' 			
else:				
if angle >= 94:				
label = 'posterior_tilt'			
elif angle <= 86:				
label = 'anterior_tilt'
else:				
label = 'normal'				
labels.append(label)				
				
df['angle'] = angles				
df['posture_label'] = labels				
return df				
				
# 왼쪽 파일 처리				
df_left = pd.read_csv(csv_left)				
df_left = label_posture(df_left)				
df_left.to_csv(output_left, index=False)				
print("왼쪽 라벨링 완료")				
				
# 오른쪽 파일 처리				
df_right = pd.read_csv(csv_right)				
df_right = label_posture(df_right)				
df_right.to_csv(output_right, index=False)				
print("오른쪽 라벨링 완료")				


#-------------------------------------------------------------------------
				
